1. Python AIMA

1.

We only need to extend the Problem class. This class is an abstraction of a Problem, and provides an interface to solve a search problem. It is used by the search algorithms to find the next node when expanding a node during the search. The Problem class is also used to test if the current state is the goal state in the search, to know when to return the current node, which is the goal state.

2.

Yield is a generator. Its elements are lazily generated, which means that they are only generated when they are needed. This means that instead of building the complete list of nodes upfront, they can be calculated one at the time, reducing the required memory.

3.

The difference is that the Breadth-first algorithm uses a first-in-first-out queue, while the Depth-first algorithm uses a stack. This means that the breadth-first search will look at every node at a certain level before going to the next one while the depth-first search will go down a path, and bubble up once it reaches the end of its branch.

4.

A closed set is used in the graph search to avoid visiting the states more than once. However, this means that more space is required to perform this search since the closed set's size grows linearly with the number of nodes in the graph. Even though more space is required in the worst case, this closed list may allow the search algorithm to avoid expanding symmetrical states, thus, saving time, and even time when comparing with the breadth-first search.

5.

A dictionary, or a hashmap, is used to store the visited states. A set could also have been used. To be able to store a key in the dictionary, the key must be hashable, which means that it must not contain lists, dictionaries, sets, or other mutable objects. Hashmaps are used to retrieve elements in constant time relative to its size. It means that it does not slow down as the dictionary's size grows.

6.

By representing states as generic configuration of the state, since the close set would store the hash of the state, two different, but symmetrical states would be considered to be the same. This way, the search will not visit symmetrical states more than once.


2. The Koutack Problem

1.

Depth first:
- If no maximum depth is set, this search approach can take a lot of time because it can follow a wrong path for a long time.
- It is faster than breadth-first search
- It takes less space than breadth-first search
- It does not always find the optimal solution

Breadth first:
- This method takes a lot of time since for every move, every possibility must be tested before going on with the next move.
- For example, every possible first move must be tested before doing a second move.
- Furthermore, this can take up a lot of space as a lot of branches are created and must be kept in memory for the next move.

2.

Yes there are equivalent states in this problem. This means that a naive solution would not consider duplicated states and search these equivalent states more than once. By applying two independent moves in different orders, the board will be the same, but by taking different paths.
For example:

With this initial board:
. a . . . .
. b . c . .
d . . e . .
f . . g h .
. i j . . .

By applying these moves:
. a . . . .
. . [b, c] . . .
d . . e . .
f . . g h .
. i j . . .

. a . . . .
. . [b, c] . . .
d . . e . .
f . [g, j] . h .
. i . . . .

We get this state:
. a . . . .
. . [b, c] . . .
d . . e . .
f . [g, j] . h .
. i . . . .

We can see that by applying the moves in the opposite order, we can obtain the same state:
. a . . . .
. b . c . .
d . . e . .
f . [g, j] . h .
. i . . . .

. a . . . .
. . [b, c] . . .
d . . e . .
f . [g, j] . h .
. i . . . .

By using a closed list and representing symmetrical states in the same way, one can avoid expending symmetrical states more than once.

3.

Tree:
- It requires more time than if using a depth-first search algorithm
- It does not allow us to avoid expending twice symmetrical states
- If using a breadth-first approach, it requires more space than using a graph

Graph:
- This allows us to avoid expending twice symmetrical states, saving us a lot of time
- If using a breadth-first approach, it requires less space than with a tree even if the closed-list is needed because there is less recursion
4.

5.